# 简介
在web实例中获取bean，可以通过下面的代码获取。
```
ApplicationContext appContext = new ClassPathXmlApplicationContext("applicationContext.xml");  
userService userService = (userService)appContext.getBean("userService");

```

但是这样存在 一个问题，applicationContext.xml会重新装配，如果里面含有线程配置类的还也会被重新启用，会被执行多次。我们可以通过`ApplicationContextAware`来解决问题，从已实例化的容器中获取已实例化的bean.


# 实现方法

用SpringUtils类实现`ApplicationContextAware`的`setApplicationContext`方法即可

```
@Component
public class SpringUtils implements ApplicationContextAware {
    private static final Logger LOGGER = LoggerFactory.getLogger(SpringUtils.class);

    public static ApplicationContext applicationContext;

    @Override
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        SpringUtils.applicationContext = applicationContext;
    }

    //获取applicationContext
    public static ApplicationContext getApplicationContext() {
        return applicationContext;
    }

    //通过name获取 Bean.
    public static Object getBean(String name){
        return getApplicationContext().getBean(name);
    }

    //通过class获取Bean.
    public static <T> T getBean(Class<T> clazz){
        return getApplicationContext().getBean(clazz);
    }

    //通过name,以及Clazz返回指定的Bean
    public static <T> T getBean(String name,Class<T> clazz){
        return getApplicationContext().getBean(name, clazz);
    }
}


```
