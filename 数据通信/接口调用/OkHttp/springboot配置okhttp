
## 引入jar包
### maven 引入
```
<dependency>
    <groupId>com.squareup.okhttp3</groupId>
    <artifactId>okhttp</artifactId>
    <version>3.14.9</version>
</dependency> 
```
注意：这里用3.X的版本，4.X的版本升级为了kotlin了
### Gradle引入
```
implementation 'com.squareup.okhttp3:okhttp:3.14.9'
```

## 配置配置文件
```
@Configuration
public class OkHttpConfiguration {

    @Bean
    public OkHttpClient okHttpClient() {
        return new OkHttpClient.Builder()
//                .sslSocketFactory(sslSocketFactory(), x509TrustManager())
                .retryOnConnectionFailure(false)
                .connectionPool(pool())
                .connectTimeout(30, TimeUnit.SECONDS)
                .readTimeout(30, TimeUnit.SECONDS)
                .writeTimeout(30,TimeUnit.SECONDS)
                .build();
    }

    @Bean
    public X509TrustManager x509TrustManager() {
        return new X509TrustManager() {
            @Override
            public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
            }
            @Override
            public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
            }
            @Override
            public X509Certificate[] getAcceptedIssuers() {
                return new X509Certificate[0];
            }
        };
    }

    @Bean
    public SSLSocketFactory sslSocketFactory() {
        try {
            //信任任何链接
            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(null, new TrustManager[]{x509TrustManager()}, new SecureRandom());
            return sslContext.getSocketFactory();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (KeyManagementException e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * Create a new connection pool with tuning parameters appropriate for a single-user application.
     * The tuning parameters in this pool are subject to change in future OkHttp releases. Currently
     */
    @Bean
    public ConnectionPool pool() {
        return new ConnectionPool(200, 5, TimeUnit.MINUTES);
    }
}
```

## 配置工具类
```
@Component
public class OkHttpUtil{
    private static final Logger logger = LoggerFactory.getLogger(OkHttpUtil.class);
    
    private static OkHttpClient  okHttpClient;

    @Autowired
    public OkHttpUtil(OkHttpClient  okHttpClient) {
        OkHttpUtil.okHttpClient= okHttpClient;
    } 
    
    /**
              * 无参get请求
     * @param url
     * @return
     * @throws IOException
     */
    public static  String get(String url) throws IOException {
        Request request = new Request.Builder()
                .url(url)
                .build();
        Response response = null;
        try { 
           response = okHttpClient.newCall(request).execute();
//           int status = response.code();
           if (response.isSuccessful()) {
               return response.body().string();
           }
        }finally {
            if (response != null) {
                response.close();
            }
        }
        return "";
    }
    
    /**
     * get
     * @param url     请求的url
     * @param queries 请求的参数，在浏览器？后面的数据
     * @return
     */
    public static String get(String url, Map<String, String> queries) throws IOException  {
        StringBuffer sb = new StringBuffer(url);
        queries.forEach((k,v) ->{
        	boolean firstFlag = true;
        	if (firstFlag) {
                sb.append("?" + k + "=" + v);
                firstFlag = false;
            } else {
                sb.append("&" + k + "=" + v);
            }
        });

        Request request = new Request.Builder()
                .url(sb.toString())
                .build();
        Response response = null;
        try { 
            response = okHttpClient.newCall(request).execute();
//            int status = response.code();
            if (response.isSuccessful()) {
                return response.body().string();
            }
        }finally {
            if (response != null) {
                response.close();
            }
        }
        return "";
    }

    
    /**
     * post
     *
     * @param url    请求的url
     * @param params post form 提交的参数
     * @return
     */
    public static String post(String url, Map<String, String> params) throws IOException {
        FormBody.Builder builder = new FormBody.Builder();
        //添加参数
        if (params != null && params.keySet().size() > 0) {
            for (String key : params.keySet()) {
                builder.add(key, params.get(key));
            }
        }
        Request request = new Request.Builder()
                .url(url)
                .post(builder.build())
                .build();
        Response response = null;
        try { 
            response = okHttpClient.newCall(request).execute();
//            int status = response.code();
            if (response.isSuccessful()) {
                return response.body().string();
            }
        } catch (Exception e) {
            logger.error("okhttp3 post error >> ex = {}");
        } finally {
            if (response != null) {
                response.close();
            }
        }
        return "";
    }

    /**
     * get
     * @param url     请求的url
     * @param queries 请求的参数，在浏览器？后面的数据，没有可以传null
     * @return
     */
    public static String getForHeader(String url, Map<String, String> queries) {
        StringBuffer sb = new StringBuffer(url);
        queries.forEach((k,v) -> {
        	boolean firstFlag = true;
        	if (firstFlag) {
                sb.append("?" + k + "=" + v);
                firstFlag = false;
            } else {
                sb.append("&" + k + "=" + v);
            }
        });
        
        Request request = new Request.Builder()
                .addHeader("key", "value")
                .url(sb.toString())
                .build();
        Response response = null;
        try { 
            response = okHttpClient.newCall(request).execute();
//            int status = response.code();
            if (response.isSuccessful()) {
                return response.body().string();
            }
        } catch (Exception e) {
            logger.error("okhttp3 put error >> ex = {}");
        } finally {
            if (response != null) {
                response.close();
            }
        }
        return "";
    }

    /**
     * Post请求发送JSON数据....{"name":"zhangsan","pwd":"123456"}
	     * 参数一：请求Url
	     * 参数二：请求的JSON
	     * 参数三：请求回调
     */
    public static String postJsonParams(String url, String jsonParams) {
        RequestBody requestBody = RequestBody.create(MediaType.parse("application/json; charset=utf-8"), jsonParams);
        Request request = new Request.Builder()
                .url(url)
                .post(requestBody)
                .build();
        Response response = null;
        try { 
            response = okHttpClient.newCall(request).execute();
//            int status = response.code();
            if (response.isSuccessful()) {
                return response.body().string();
            }
        } catch (Exception e) {
            logger.error("okhttp3 post error >> ex = {}");
        } finally {
            if (response != null) {
                response.close();
            }
        }
        return "";
    }

    /**
     * Post请求发送xml数据....
	     * 参数一：请求Url
	     * 参数二：请求的xmlString
	     * 参数三：请求回调
     */
    public static String postXmlParams(String url, String xml) {
        RequestBody requestBody = RequestBody.create(MediaType.parse("application/xml; charset=utf-8"), xml);
        Request request = new Request.Builder()
                .url(url)
                .post(requestBody)
                .build();
        Response response = null;
        try { 
            response = okHttpClient.newCall(request).execute();
//            int status = response.code();
            if (response.isSuccessful()) {
                return response.body().string();
            }
        } catch (Exception e) {
            logger.error("okhttp3 post error >> ex = {}");
        } finally {
            if (response != null) {
                response.close();
            }
        }
        return "";
    }
}
```

# 测试
```
@RunWith(SpringRunner.class)
@SpringBootTest(classes = SpringbootApplication.class,webEnvironment=SpringBootTest.WebEnvironment.RANDOM_PORT)
public class SpringbootTestOkHttp {

	@Test
	public void testGet() throws IOException {
		String url = "http://www.baidu.com";
		Map<String, String> queries = new HashMap<String, String>();
		
		System.out.println(OkHttpUtil.get(url));
	}
}
```

